// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PlayerMark {
    X
    O
}

enum RoomStatus {
    IN_PROGRESS
    FINISHED
    LOBBY
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ownedRooms    Room[]    @relation("owner")
    rooms         Room[]    @relation("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id          String          @id @default(cuid())
    owner       User            @relation("owner", fields: [ownerId], references: [id])
    ownerId     String
    playerTwo   User?           @relation("users", fields: [playerTwoId], references: [id])
    playerTwoId String?
    gameState   RoomGameState[]
    status      RoomStatus      @default(LOBBY)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@index([playerTwoId])
    @@index([ownerId])
}

model RoomGameState {
    id        String      @id @default(cuid())
    room      Room        @relation(fields: [roomId], references: [id])
    roomId    String
    board     Json        @default("[null, null, null, null, null, null, null, null, null]") // Array<'X' | 'O' | null>
    nextTurn  PlayerMark  @default(X) // Either X or O
    winner    PlayerMark? // Either X, O, or null
    createdAt DateTime    @default(now())

    @@index([roomId])
}
